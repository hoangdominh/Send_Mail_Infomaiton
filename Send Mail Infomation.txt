
										<<< SEND MAIL >>> 
    public void sendMailTest() {
        try {
            SendMailUtil sendMailUtil = new SendMailUtil();
            List<MailQuartzSchedulerDTO> list = mailLogQueueRepository.listMailLogQueue();
            Set<Long> configIds = new HashSet<>();     // Set Id Config
            Set<Long> logQueueIds = new HashSet<>();   // Set Id Log Queue
            for (MailQuartzSchedulerDTO mail : list) {
                configIds.add(mail.getConfigId());
                logQueueIds.add(mail.getLogQueueId());
            }
            List<MailConfig> listConfig = mailRepository.findByIds(configIds);
            List<MailLogQueue> listLogQueue = mailLogQueueRepository.findByIds(logQueueIds);

            for (MailQuartzSchedulerDTO mailQuartz : list) {
                String valueMailConfigMail = mailQuartz.getValueJson();
                MailInfo mailInfo = new Gson().fromJson(valueMailConfigMail, MailInfo.class);
                boolean check = sendMailUtil.sendEmail(mailInfo.getHost(), mailInfo.getPort(), mailInfo.getUser(), mailInfo.getPwd(),
                        mailQuartz.getSubject(), mailQuartz.getContent(), mailQuartz.getReceiverTo(), mailQuartz.getReceiverCc(),
                        mailQuartz.getReceiverBcc(), null, null);
                if (check) {
                    for (MailLogQueue mailLogQueue : listLogQueue) {
                        if (Objects.equals(mailLogQueue.getId(), mailQuartz.getLogQueueId())){
                            mailLogQueue.setStatus(1);
                            mailLogQueue.setReceiverFrom(mailInfo.getUser());
                        }
                    }
                    mailLogQueueRepository.saveAll(listLogQueue);
                }
            }
            System.out.println("Hello..............!!!!!!!!!!!");
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }
	
	
	
								{{{{{{{{{ HÀM SEND MAIL INFO }}}}}}}}}
								
								package cmc.baseservice.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.Properties;

public class SendMailUtil {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    public boolean sendEmail(String host, String port, String emailUser, String emailPassword,
                          String subject, String content, String lstReceiver,
                          String listReceiverCc , String listReceiverBcc, String referenceURL,
                          File attachment
    ) throws MessagingException, IOException{
        try {
            // Get properties object

            Properties properties = new Properties();
            //  Máy chủ SMTP để kết nối
            properties.put("mail.smtp.host", host);
            //  Cổng máy chủ SMTP để kết nối, nếu phương thức connect() không chỉ định rõ ràng.Mặc định là 25.
            properties.put("mail.smtp.port", port);
            //  Tên người dùng mặc định cho SMTP.
            properties.put("mail.user", emailUser);
            //  Mật khẩu nguười dùng
            properties.put("mail.password", emailPassword);
            //  Nếu đúng, hãy thử xác thực người dùng bằng lệnh AUTH. Mặc định là sai.
            properties.put("mail.smtp.auth", "true");
            //
            properties.put("mail.smtp.starttls.enable", "true");
            //  Tất cả các máy chủ đều đáng tin cậy.
            properties.put("mail.smtp.ssl.trust", host);

            // get Session
            Session session = Session.getInstance(properties, new Authenticator() {
                public PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(emailUser, emailPassword);
                }
            });

            // compose message
            Message msg = new MimeMessage(session);
            //
            msg.setFrom(new InternetAddress(emailUser));
            msg.setSubject(subject);
            msg.setSentDate(new Date());

            // ReciversTo
            String[] recievers = lstReceiver.split(",");
            String formatedReciever = "";
            for (int i = 0; i < recievers.length; i++) {
                try {
                    new InternetAddress(recievers[i]);
                    formatedReciever += recievers[i] + ",";
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.error("Email address not valid");
                }
            }
            // Nếu khác rỗng thì cắt chuỗi,
            if (!"".equals(formatedReciever)) {
                formatedReciever = formatedReciever.substring(0, formatedReciever.length() - 1);
                recievers = formatedReciever.split(",");
            } else {
                logger.error("Email address not valid");
                return false;
            }
            InternetAddress[] recieveAddress = new InternetAddress[recievers.length];

            for (int i = 0; i < recieveAddress.length; i++) {
                try {
                    recieveAddress[i] = new InternetAddress(recievers[i]);
                } catch (Exception e) {
                    logger.error("Invalid Address: " + recievers[i]);
                }
            }

            msg.setRecipients(Message.RecipientType.TO, recieveAddress);


            // ReciversCc
            if (listReceiverCc != null){
                String[] recieverCc = listReceiverCc.split(",");
                String formatedRecieverCc = "";
                for (int i = 0; i < recieverCc.length; i++) {
                    try {
                        new InternetAddress(recieverCc[i]);
                        formatedRecieverCc += recieverCc[i] + ",";
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error("Email address not valid");
                    }
                }
                // Nếu khác rỗng thì cắt chuỗi,
                if (!"".equals(formatedRecieverCc)) {
                    formatedRecieverCc = formatedRecieverCc.substring(0, formatedRecieverCc.length() - 1);
                    recieverCc = formatedRecieverCc.split(",");
                } else {
                    logger.error("Email address not valid");
                    return false;
                }
                InternetAddress[] recieverCcAddress = new InternetAddress[recieverCc.length];

                for (int i = 0; i < recieverCcAddress.length; i++) {
                    try {
                        recieverCcAddress[i] = new InternetAddress(recieverCc[i]);
                    } catch (Exception e) {
                        logger.error("Invalid Address: " + recieverCc[i]);
                    }
                }

                msg.setRecipients(Message.RecipientType.TO, recieverCcAddress);

            }

            // ReciversBcc
            if (listReceiverBcc !=null){
                String[] recieverBcc = listReceiverBcc.split(",");
                String formatedRecieverBcc = "";
                for (int i = 0; i < recieverBcc.length; i++) {
                    try {
                        new InternetAddress(recieverBcc[i]);
                        formatedRecieverBcc += recieverBcc[i] + ",";
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error("Email address not valid");
                    }
                }
                // Nếu khác rỗng thì cắt chuỗi,
                if (!"".equals(formatedRecieverBcc)) {
                    formatedRecieverBcc = formatedRecieverBcc.substring(0, formatedRecieverBcc.length() - 1);
                    recieverBcc = formatedRecieverBcc.split(",");
                } else {
                    logger.error("Email address not valid");
//                return false;
                }
                InternetAddress[] recieverBccAddress = new InternetAddress[recieverBcc.length];

                for (int i = 0; i < recieverBccAddress.length; i++) {
                    try {
                        recieverBccAddress[i] = new InternetAddress(recieverBcc[i]);
                    } catch (Exception e) {
                        logger.error("Invalid Address: " + recieverBcc[i]);
                    }
                }

                msg.setRecipients(Message.RecipientType.TO, recieverBccAddress);
            }


            // created message part
            MimeBodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setContent(content, "text/html; charset=utf-8");


            // creates multi-part
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);

            //(send File)
            // add attachments file
            if (referenceURL != null) {
                String [] attachFiles = referenceURL.split(",");
                if(attachFiles != null & attachFiles.length >0){
                    for (String filePath : attachFiles)
                    {
                        MimeBodyPart attachPart = new MimeBodyPart();
                        attachPart.attachFile(new File(filePath));
                        multipart.addBodyPart(attachPart);
                    }
                }
            }

            // Send File <2>
//            MimeBodyPart attachPart = new MimeBodyPart();
//            String fileName =  referenceURL;
//            DataSource source =  new FileDataSource(fileName);
//            attachPart.setDataHandler(new DataHandler(source));
//            attachPart.setFileName(fileName);
//            //Trick is to add the content-id header here
//            attachPart.setHeader("Content-ID", "image_id");
//            multipart.addBodyPart(attachPart);


            //Send Image
//            MimeBodyPart attachImage = new MimeBodyPart();
//            attachImage.setContent("<h1>Attached Image</h1>" + "<img src='cid:image_id'>", "text/html");
//            multipart.addBodyPart(attachImage);
            msg.setContent(multipart);

            // sends the e-mail
            Transport.send(msg);
        } catch (Exception ex) {
            logger.error("Error: " + ex.getMessage());
            return false;
        }
        return true;
    }
}
